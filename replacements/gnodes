#!/usr/bin/env python
import subprocess
from math import ceil, floor
import re
import os, sys
from collections import namedtuple
import random

Meta = namedtuple('Meta', ['load', 'in_use', 'unavailable', 'total', 'job_ids', 'user_ids'])

# Symbols:
BASE        = '.'
ALLOCATED   = '_'
USE         = 'O'
OVERUSE     = '!'
UNKNWON_USE = '?'

def expand_nodes(s):
    # If we are given a complicated nodelist (like s02n[11-18,42]) we ask an
    # adult for help, but if it is a single node or comma separated list of
    # nodes we do it our selves since the overhead of starting an external
    # application can add up to a noticable delay.
    if s.count("[") == 0:
        for n in s.split(","):
            yield n
    else:
        info = subprocess.Popen(['scontrol', 'show', 'hostname', s], stdout=subprocess.PIPE)
        for node in info.stdout:
            yield node.strip()
        info.wait()

layout_path = os.path.dirname(sys.argv[0]) + '/gnodes.layout'
if not os.path.exists(layout_path):
    print "   +------------------------+"
    print "   |  Gnodes not available  |"
    print "   +------------------------+"
    sys.exit(1)

layout = bytearray(open(layout_path).read())

pattern = re.compile('$^')

if len(sys.argv) >= 2:
    pattern = re.compile('|'.join(sys.argv[1:]))

def is_float(x):
    try:
        y = float(x)
        return True
    except ValueError:
        return False

def make_bar(meta):
    x = bytearray(BASE*meta.total)
    if meta.unavailable > 0:
        assert meta.unavailable == meta.total
        x[:] = '-'*meta.unavailable
        x[-1] = 'U'
    elif meta.in_use > 0:
        x[:meta.in_use] = ALLOCATED*meta.in_use
        load = meta.load
        Ls = meta.load
        if is_float(Ls):
            Lf = float(Ls)
            cores_used = min(meta.in_use, int(floor(Lf + 0.5)))
            if Lf > meta.in_use*1.5:
                x[:cores_used] = OVERUSE*cores_used
            else:
                x[:cores_used] = USE*cores_used
        else:
            x[:meta.in_use] = UNKNOWN_USE*meta.in_use
    return str(x[::-1])

def main():
    node_meta = {}
    info = subprocess.Popen(['sinfo', "--format=%n;%C;%O;%t", '--noheader'], stdout=subprocess.PIPE)
    for line in info.stdout:
        node,cpuinfo,load,state = line.strip().split(';')
        in_use,idle,unavailable,total = map(int, cpuinfo.split('/'))
        node_meta[node] = Meta(load, in_use, unavailable, total, set(), set())
    info.wait()

    info = subprocess.Popen(['squeue',
            "--format=%i;%t;%u;%N",
            '--states=R',
            '--noheader'], stdout=subprocess.PIPE)
    result = []
    for line in info.stdout:
        jobid,state,user,nodes = line.strip().split(';')
        if state != 'R':
            continue
        ex_nodes = list(expand_nodes(nodes))
        for n in ex_nodes:
            node_meta[n].job_ids.add(jobid)
            node_meta[n].user_ids.add(user)
    for node,meta in node_meta.iteritems():
        search_target = meta.job_ids | meta.user_ids | set([node])
        highlight = any(pattern.search(x) != None for x in search_target)
        bar = make_bar(meta)
        a = layout.find(node)
        if a == -1:
            continue
        a += len(node) + 2
        b = a + len(bar)
        if highlight:
            bar = '\033[104m%s\033[00m' % bar
        layout[a:b] = bar
    print layout

if __name__ == "__main__":
    main()
